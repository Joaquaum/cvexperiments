from matplotlib import pyplot as plt
import numpy as np
from matplotlib.animation import FuncAnimation
import matplotlib
# Leitura dos dados
arquivo = open('base200.txt', 'r')
linhas = arquivo.readlines()
arquivo.close()   
data = []
for linha in linhas:
    campos = linha.replace("\n", "").split(" ")  
    data.append(([float(campos[1]), float(campos[2]), float(campos[3])]))

y1,x1,x2 = [],[],[]
for i in data:
    y1.append(i[2])
    x1.append(i[0])
    x2.append(i[1])
y,p1,p2 = np.array(y1), np.array(x1), np.array(x2)
a = p1.shape[0]  # número de amostras
b = 1  # bias
X = np.vstack((p1, p2))
eta = 0.5
w1 = np.random.uniform(-1, 1, 3)
w2 = np.random.uniform(-1, 1, 3)
w3 = np.random.uniform(-1, 1, 3)

e = 100  # número de épocas

def sigmoide(v):
    return 1 / (1 + np.exp(-v))
def sigmoide_der(v):
    return sigmoide(v) * (1 - sigmoide(v))

# Configuração da figura para a animação
fig, ax = plt.subplots(figsize=(8, 6))

# Plot dos pontos
for i in range(len(data)):
    if data[i][2] == 1:
        ax.plot([data[i][0]], [data[i][1]], 'bo')
    else:
        ax.plot([data[i][0]], [data[i][1]], 'ro')

ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
ax.set_xlabel('X1')
ax.set_ylabel('X2')
ax.set_title('Evolução do Perceptron')

# Linha inicial (antes do treinamento)
line1, = ax.plot([], [], 'k-', lw=2)
line2, = ax.plot([], [], 'k-', lw=2)
epoch_text = ax.text(0.02, 0.95, '', transform=ax.transAxes)

# Função de inicialização da animação
def init():
    line1.set_data([], [])
    line2.set_data([], [])
    epoch_text.set_text('')
    return line1,line2, epoch_text

#atualizacao da animacao
def update(frame):
    global w1,w2,w3
    erros_epoca = 0
    for t in range(a):
        xb = np.hstack((b, X[:, t]))

        v1 = np.dot(xb, w1)  # campo local induzido
        ys1 = sigmoide(v1)  # valor da saída
        v2 = np.dot(xb, w2)  # campo local induzido
        ys2 = sigmoide(v2)  # valor da saída
        
        xb2 = np.array([1, ys1, ys2])
        v3 = np.dot(xb2, w3)
        ys3 = sigmoide(v3)
        
        erro3 = y[t] - ys3
        g3 = erro3 * sigmoide_der(v3)
        g1 = sigmoide_der(v1) * g3 * w3[1]
        g2 = sigmoide_der(v2) * g3 * w3[2]
        #atualizacao pesos
        w1 = w1 + eta * g1 * xb
        w2 = w2 + eta * g2 * xb
        w3 = w3 + eta * g3 * xb2

    x_plot = np.linspace(0, 1, 100)
    y_plot1 = -(w1[1] * x_plot + w1[0]) / w1[2]
    y_plot2 = -(w2[1] * x_plot + w2[0]) / w2[2]
    
    #mascara
    mask1 = (y_plot1 >= 0) & (y_plot1 <= 1)
    mask2 = (y_plot2 >= 0) & (y_plot2 <= 1)

    line1.set_data(x_plot[mask1], y_plot1[mask1])
    line2.set_data(x_plot[mask2], y_plot2[mask2])
    
    epoch_text.set_text(f'Época: {frame+1}')
    print(erro3)

anim = FuncAnimation(fig, update, frames = 5000, init_func=init, blit = False, interval=100, repeat=False)
plt.show()
